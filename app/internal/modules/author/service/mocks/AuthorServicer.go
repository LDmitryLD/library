// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	models "projects/LDmitryLD/library/app/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// AuthorServicer is an autogenerated mock type for the AuthorServicer type
type AuthorServicer struct {
	mock.Mock
}

// Add provides a mock function with given fields: author
func (_m *AuthorServicer) Add(author models.Author) error {
	ret := _m.Called(author)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Author) error); ok {
		r0 = rf(author)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTop provides a mock function with given fields:
func (_m *AuthorServicer) GetTop() ([]models.Author, error) {
	ret := _m.Called()

	var r0 []models.Author
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Author, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Author); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Author)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthorServicer creates a new instance of AuthorServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorServicer {
	mock := &AuthorServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
