// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	models "projects/LDmitryLD/library/app/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// BookServicer is an autogenerated mock type for the BookServicer type
type BookServicer struct {
	mock.Mock
}

// Add provides a mock function with given fields: book
func (_m *BookServicer) Add(book models.BookDTO) error {
	ret := _m.Called(book)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.BookDTO) error); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BackBook provides a mock function with given fields: userID, bookID
func (_m *BookServicer) BackBook(userID int, bookID int) error {
	ret := _m.Called(userID, bookID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userID, bookID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BookList provides a mock function with given fields:
func (_m *BookServicer) BookList() ([]models.Book, error) {
	ret := _m.Called()

	var r0 []models.Book
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Book, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Book)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RentBook provides a mock function with given fields: userID, bookID
func (_m *BookServicer) RentBook(userID int, bookID int) error {
	ret := _m.Called(userID, bookID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userID, bookID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBookServicer creates a new instance of BookServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookServicer {
	mock := &BookServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
